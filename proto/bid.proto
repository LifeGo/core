syntax = "proto3";

import "insonmnia.proto";

package sonm;

// CPU requirements.
message CPURequirements {
    // CPU types acceptable. Empty list means any.
    repeated string type = 1;
    // CPU frequency minimum, measured in MHz.
    int64 freqMin = 2;
    // CPU speed minimum, measured in some benchmark.
    int64 speedMin = 3;
    // CPU core count minimum.
    int32 coresMin = 4;
}

// RAM requirements.
message RAMRequirements {
    // RAM types acceptable. Empty list means any.
    repeated string type = 1;
    // Number of RAM bytes minimum required.
    int64 amountMin = 2;
}

// Disk requirements.
message DiskRequirements {
    // Disk types acceptable. Empty list means any.
    repeated string type = 1;
    // Number of bytes minimum required.
    int64 amountMin = 2;
    // Random read throughput minimum, measured in Kbytes/sec.
    int64 readRandSpeedMin = 3;
    // Random read throughput minimum, measured in IOPS.
    int64 readRandIopsMin = 4;
    // Random write throughput minimum, measured in Kbytes/sec.
    int64 writeRandSpeedMin = 5;
    // Random write throughput minimum, measured in IOPS.
    int64 writeRandIopsMin = 6;
    // I/O latency maximum, measured in microseconds.
    int64 latencyMax = 7;
}

// Internet connection requirements.
message NetworkRequirements {
    // Outbound throughput of Internet connection minimum, measured in Kbytes/sec.
    int64 outSpeedMin = 1;
    // Inbound throughput of Internet connection minimum, measured in Kbytes/sec.
    int64 inSpeedMin = 2;
    // Round-trip latency to some public resource maximum, measured in ms. TODO: DOUBTFUL.
    // float networkLatencyMax = 3;
    // Flag to use "white IP" for incoming connections.
    bool whiteIp = 4;
}

message GPURequirements {
    // GPU types acceptable. Empty list means any.
    repeated string type = 1;
    // RAM minimum, measured in Gbytes. TODO: WAT?
    int64 ramMin = 2;
    // Frequency minimum, measured in MHz
    int64 freqMin = 3;
    // Shaders count minimum.
    int64 shadersMin = 4;
    // Texture mapping unit count minimum.
    int64 tmusMin = 5;
    // Render output unit count minimum.
    int64 ropsMin = 6;
}

message BidItem {
    // When a container should be run (hour-grained).
    Timestamp startTime = 1;
    // When a container should to be stopped (hour-grained).
    Timestamp endTime = 2;
    // Minimal scale factor for a container.
    int32 countMin = 3;
    // Maximum scale factor for a container.
    int32 countMax = 4;
    // Probability of node failure maximum.
    float failureMax = 5;
    // Node availability minimum.
    float availabilityMin = 6;
    // Node rating minimum.
    float ratingMin = 7;
    // Price per hour maximum.
    // If omitted, the minimum price for matched node is used (market price),
    // or if node also asks for market price, the price is evaluated
    // automatically (TBD).
    float priceMax = 8;
}